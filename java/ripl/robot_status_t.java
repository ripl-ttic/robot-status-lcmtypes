/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package ripl;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class robot_status_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public byte state;
    public long faults;
    public String comment;
 
    public robot_status_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x336de18dbe68cefeL;
 
    public static final byte STATE_UNDEFINED = (byte) 0;
    public static final byte STATE_RUN = (byte) 1;
    public static final byte STATE_STANDBY = (byte) 2;
    public static final byte STATE_STOP = (byte) 3;
    public static final byte STATE_MANUAL = (byte) 4;
    public static final byte STATE_ERROR = (byte) 5;
    public static final long FAULT_NONE = 0x0000000000000000L;
    public static final long FAULT_NAV = 0x0000000000000001L;
    public static final long FAULT_ACTUATION = 0x0000000000000002L;
    public static final long FAULT_SENSORS = 0x0000000000000004L;
    public static final long FAULT_TIMEOUT = 0x0000000000000008L;
    public static final long FAULT_ESTOP = 0x0000000000000010L;
    public static final long FAULT_LOCKOUT = 0x0000000000000020L;
    public static final long FAULT_BATTERY = 0x0000000000000040L;
    public static final long FAULT_HEARTBEAT = 0x0000000000010000L;
    public static final long FAULT_CONTROL = 0x0000000000020000L;
    public static final long FAULT_PERCEPT = 0x0000000000040000L;
    public static final long FAULT_SHOUT = 0x0000000100000000L;
    public static final long FAULT_HUMAN = 0x0000000200000000L;
    public static final long FAULT_MANUAL = 0x0000000400000000L;
    public static final long FAULT_FRONT_DROPOFF = 0x0000001000000000L;
    public static final long FAULT_REAR_DROPOFF = 0x0000002000000000L;
    public static final long FAULT_MASK_NO_CHANGE = 0L;
    public static final long FAULTS_PREVENTING_RUN = 0xffffffffffffffffL;
    public static final long FAULTS_PREVENTING_STANDBY = 0x0fffffffffffffffL;
    public static final long FAULTS_PREVENTING_MANUAL = 0x00fffff0ffffffffL;
    public static final long FAULTS_OK_IN_MANUAL = 0x00fffff0ffffffffL;
    public static final long FAULTS_OK_IN_RUN = 0x00ffffffffffffffL;
    public static final long FAULTS_OK_IN_STANDBY = 0x00ffffffffffffffL;
    public static final long FAULT_MASK_CLEAR_ALL = 0xffffffffffffffffL;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(ripl.robot_status_t.class))
            return 0L;
 
        classes.add(ripl.robot_status_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        outs.writeByte(this.state); 
 
        outs.writeLong(this.faults); 
 
        __strbuf = new char[this.comment.length()]; this.comment.getChars(0, this.comment.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public robot_status_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public robot_status_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static ripl.robot_status_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        ripl.robot_status_t o = new ripl.robot_status_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        this.state = ins.readByte();
 
        this.faults = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.comment = new String(__strbuf);
 
    }
 
    public ripl.robot_status_t copy()
    {
        ripl.robot_status_t outobj = new ripl.robot_status_t();
        outobj.utime = this.utime;
 
        outobj.state = this.state;
 
        outobj.faults = this.faults;
 
        outobj.comment = this.comment;
 
        return outobj;
    }
 
}

