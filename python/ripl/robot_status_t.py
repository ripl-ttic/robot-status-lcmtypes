"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class robot_status_t(object):
    __slots__ = ["utime", "state", "faults", "comment"]

    __typenames__ = ["int64_t", "int8_t", "int64_t", "string"]

    __dimensions__ = [None, None, None, None]

    STATE_UNDEFINED = 0
    STATE_RUN = 1
    STATE_STANDBY = 2
    STATE_STOP = 3
    STATE_MANUAL = 4
    STATE_ERROR = 5
    FAULT_NONE = 0x0000000000000000
    FAULT_NAV = 0x0000000000000001
    FAULT_ACTUATION = 0x0000000000000002
    FAULT_SENSORS = 0x0000000000000004
    FAULT_TIMEOUT = 0x0000000000000008
    FAULT_ESTOP = 0x0000000000000010
    FAULT_LOCKOUT = 0x0000000000000020
    FAULT_BATTERY = 0x0000000000000040
    FAULT_HEARTBEAT = 0x0000000000010000
    FAULT_CONTROL = 0x0000000000020000
    FAULT_PERCEPT = 0x0000000000040000
    FAULT_SHOUT = 0x0000000100000000
    FAULT_HUMAN = 0x0000000200000000
    FAULT_MANUAL = 0x0000000400000000
    FAULT_FRONT_DROPOFF = 0x0000001000000000
    FAULT_REAR_DROPOFF = 0x0000002000000000
    FAULT_MASK_NO_CHANGE = 0
    FAULTS_PREVENTING_RUN = 0xffffffffffffffff
    FAULTS_PREVENTING_STANDBY = 0x0fffffffffffffff
    FAULTS_PREVENTING_MANUAL = 0x00fffff0ffffffff
    FAULTS_OK_IN_MANUAL = 0x00fffff0ffffffff
    FAULTS_OK_IN_RUN = 0x00ffffffffffffff
    FAULTS_OK_IN_STANDBY = 0x00ffffffffffffff
    FAULT_MASK_CLEAR_ALL = 0xffffffffffffffff

    def __init__(self):
        self.utime = 0
        self.state = 0
        self.faults = 0
        self.comment = ""

    def encode(self):
        buf = BytesIO()
        buf.write(robot_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbq", self.utime, self.state, self.faults))
        __comment_encoded = self.comment.encode('utf-8')
        buf.write(struct.pack('>I', len(__comment_encoded)+1))
        buf.write(__comment_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robot_status_t()
        self.utime, self.state, self.faults = struct.unpack(">qbq", buf.read(17))
        __comment_len = struct.unpack('>I', buf.read(4))[0]
        self.comment = buf.read(__comment_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if robot_status_t in parents: return 0
        tmphash = (0x336de18dbe68cefe) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robot_status_t._packed_fingerprint is None:
            robot_status_t._packed_fingerprint = struct.pack(">Q", robot_status_t._get_hash_recursive([]))
        return robot_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

